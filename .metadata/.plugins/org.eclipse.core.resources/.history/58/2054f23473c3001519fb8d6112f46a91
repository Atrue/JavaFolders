package application;

import javafx.scene.paint.Color;

import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.Random;

import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;

public class MyCanvas extends Canvas {  
	private static Random r = new Random();
    private GraphicsContext gc;
    private double dx;
    
    private BGLine lines[] = new BGLine[5];
    
    public MyCanvas(Scene scene){  
        super(scene.getWidth(), scene.getHeight());  
        widthProperty().bind(scene.widthProperty());
        gc = getGraphicsContext2D();  
        for(int i=0;i<lines.length;i++){
        	lines[i] = new BGLine((int)getHeight(), (int)getWidth());
        }
        repaintContext();
    }  
     
   public void repaintContext(){  
	   double width = getWidth();  
	   double height = getHeight();  
	   gc.clearRect(0, 0, width, height); // ������� ������� 
	   
	   for(int i = 0; i < lines.length; i++){   
		   lines[i].update();
		   gc.setFill(Color.BLUE);
		   gc.fillPolygon(lines[i].getDotX(), lines[i].getDotY(), lines[i].getCount()); 
	   } 
	   double[] a = {0.0, 9.090169943749475, 17.877852522924734, 26.090169943749473, 33.510565162951536, 40.0, 45.510565162951536, 50.09016994374947, 53.877852522924734, 57.09016994374947, 60.0, 62.90983005625052, 66.12214747707527, 69.90983005625053, 74.48943483704846, 80.0, 86.48943483704846, 93.90983005625053, 102.12214747707526, 110.90983005625053, 120.0, 129.09016994374946, 137.87785252292474, 146.09016994374946, 153.51056516295154, 160.0, 165.51056516295154, 170.0901699437495, 173.87785252292474, 177.0901699437495, 180.0, 182.90983005625054, 186.12214747707526, 189.90983005625054, 194.48943483704846, 200.0, 206.48943483704846, 213.9098300562505, 222.12214747707526, 230.9098300562505, 240.0, 249.09016994374946, 257.87785252292474, 266.09016994374946, 273.51056516295154, 280.0, 285.51056516295154, 290.09016994374946, 293.87785252292474, 297.09016994374946, 300.0, 302.90983005625054, 306.12214747707526, 309.90983005625054, 314.48943483704846, 320.0, 326.48943483704846, 333.90983005625054, 342.12214747707526, 350.9098300562505, 360.0, 369.09016994374946, 377.87785252292474, 386.09016994374946, 393.51056516295154, 400.0, 405.51056516295154, 410.09016994374946, 413.87785252292474, 417.09016994374946, 420.0, 422.90983005625054, 426.12214747707526, 429.90983005625054, 434.48943483704846, 440.0, 446.48943483704846, 453.9098300562505, 462.12214747707526, 470.9098300562505, 480.0, 489.09016994374946, 497.87785252292474, 506.09016994374946, 513.5105651629515, 520.0, 525.5105651629515, 530.0901699437495, 533.8778525229247, 537.0901699437495, 540.0, 542.9098300562505, 546.1221474770753, 549.9098300562505, 554.4894348370485, 560.0, 566.4894348370484, 573.9098300562505, 582.1221474770753, 590.9098300562505, 590.9098300562505, 582.1221474770753, 573.9098300562505, 566.4894348370484, 560.0, 554.4894348370485, 549.9098300562505, 546.1221474770753, 542.9098300562505, 540.0, 537.0901699437495, 533.8778525229247, 530.0901699437495, 525.5105651629515, 520.0, 513.5105651629515, 506.09016994374946, 497.87785252292474, 489.09016994374946, 480.0, 470.9098300562505, 462.12214747707526, 453.9098300562505, 446.48943483704846, 440.0, 434.48943483704846, 429.90983005625054, 426.12214747707526, 422.90983005625054, 420.0, 417.09016994374946, 413.87785252292474, 410.09016994374946, 405.51056516295154, 400.0, 393.51056516295154, 386.09016994374946, 377.87785252292474, 369.09016994374946, 360.0, 350.9098300562505, 342.12214747707526, 333.90983005625054, 326.48943483704846, 320.0, 314.48943483704846, 309.90983005625054, 306.12214747707526, 302.90983005625054, 300.0, 297.09016994374946, 293.87785252292474, 290.09016994374946, 285.51056516295154, 280.0, 273.51056516295154, 266.09016994374946, 257.87785252292474, 249.09016994374946, 240.0, 230.9098300562505, 222.12214747707526, 213.9098300562505, 206.48943483704846, 200.0, 194.48943483704846, 189.90983005625054, 186.12214747707526, 182.90983005625054, 180.0, 177.0901699437495, 173.87785252292474, 170.0901699437495, 165.51056516295154, 160.0, 153.51056516295154, 146.09016994374946, 137.87785252292474, 129.09016994374946, 120.0, 110.90983005625053, 102.12214747707526, 93.90983005625053, 86.48943483704846, 80.0, 74.48943483704846, 69.90983005625053, 66.12214747707527, 62.90983005625052, 60.0, 57.09016994374947, 53.877852522924734, 50.09016994374947, 45.510565162951536, 40.0, 33.510565162951536, 26.090169943749473, 17.877852522924734, 9.090169943749475, 0.0};
	   double[] b = {290.0, 290.01, 290.02, 290.03, 290.04, 290.05, 290.06, 290.07, 290.08, 290.09, 290.1, 290.11, 290.12, 290.13, 290.14, 290.15, 290.16, 290.17, 290.18, 290.19, 290.2, 290.21, 290.22, 290.23, 290.24, 290.25, 290.26, 290.27, 290.28, 290.29, 290.3, 290.31, 290.32, 290.33, 290.34, 290.35, 290.36, 290.37, 290.38, 290.39, 290.4, 290.41, 290.42, 290.43, 290.44, 290.45, 290.46, 290.47, 290.48, 290.49, 290.5, 290.51, 290.52, 290.53, 290.54, 290.55, 290.56, 290.57, 290.58, 290.59, 290.6, 290.61, 290.62, 290.63, 290.64, 290.65, 290.66, 290.67, 290.68, 290.69, 290.7, 290.71, 290.72, 290.73, 290.74, 290.75, 290.76, 290.77, 290.78, 290.79, 290.8, 290.81, 290.82, 290.83, 290.84, 290.85, 290.86, 290.87, 290.88, 290.89, 290.9, 290.91, 290.92, 290.93, 290.94, 290.95, 290.96, 290.97, 290.98, 290.99, 310.99, 310.98, 310.97, 310.96, 310.95, 310.94, 310.93, 310.92, 310.91, 310.9, 310.89, 310.88, 310.87, 310.86, 310.85, 310.84, 310.83, 310.82, 310.81, 310.8, 310.79, 310.78, 310.77, 310.76, 310.75, 310.74, 310.73, 310.72, 310.71, 310.7, 310.69, 310.68, 310.67, 310.66, 310.65, 310.64, 310.63, 310.62, 310.61, 310.6, 310.59, 310.58, 310.57, 310.56, 310.55, 310.54, 310.53, 310.52, 310.51, 310.5, 310.49, 310.48, 310.47, 310.46, 310.45, 310.44, 310.43, 310.42, 310.41, 310.4, 310.39, 310.38, 310.37, 310.36, 310.35, 310.34, 310.33, 310.32, 310.31, 310.3, 310.29, 310.28, 310.27, 310.26, 310.25, 310.24, 310.23, 310.22, 310.21, 310.2, 310.19, 310.18, 310.17, 310.16, 310.15, 310.14, 310.13, 310.12, 310.11, 310.1, 310.09, 310.08, 310.07, 310.06, 310.05, 310.04, 310.03, 310.02, 310.01, 310.0};
	   gc.fillPolygon(b,a,200);
   }  
   public class BGLine{
	   	private int acc = 200;
	   	private int filling = 10;
		private double dotX[] = new double[acc];
		private double dotY[] = new double[acc];
		
		private Color bgcolor;
		
		private int height;
		private int width;
		
		private int _dx = 0; 
		public BGLine(int height, int width){
			this.height = height;
			this.width = width;
			bgcolor = Color.color(r.nextDouble(), r.nextDouble(), r.nextDouble());
		}
		public void update(){
			double _koef =  width/(acc/2);
			for(int x=0; x<acc/2; x++){
				   double rad = (x +_dx)*18 * Math.PI / 180;
				   double dY = Math.sin(rad) * filling + _koef* x;
				   double dX = _koef * x/width+300;
				   dotX[x] = dX - filling;
				   dotX[acc-1 - x] = dX + filling;
				   dotY[x] = dY;
				   dotY[acc-1 - x] = dY;
			   }
			_dx ++;
		}
		public int getCount(){
			return acc;
		}
		public double[] getDotX(){
			return dotX;
		}
		public double[] getDotY(){
			return dotY;
		}
		public Color getColor(){
			return bgcolor;
		}
   }
}  

